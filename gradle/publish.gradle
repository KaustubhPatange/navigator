/*
 * Copyright 2020 Kaustubh Patange
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

signing {
    sign publishing.publications
}

nexusStaging {
    packageGroup = 'io.github.kaustubhpatange'
    stagingProfileId = 'c51d602c035a'
    username = ossrhUsername
    password = ossrhPassword
}

def getSnapshotVersion() {
    def lastCommit = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    return "$PUBLISH_VERSION-$lastCommit-SNAPSHOT"
}

def getPublishMode() {
    if (!rootProject.hasProperty("PUBLISH_MODE")) return null
    return rootProject.property("PUBLISH_MODE")
}

afterEvaluate {
    publishing {
        def mode = getPublishMode()

        publications {
            release(MavenPublication) {
                from components.release
                artifact androidSourcesJar

                groupId = 'io.github.kaustubhpatange'
                artifactId = PUBLISH_ARTIFACT_ID
                version = mode == "snapshot" ? getSnapshotVersion() : PUBLISH_VERSION

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'A small navigation library to ease the use of fragment transactions & handling backstack.'
                    url = 'https://github.com/KaustubhPatange/navigator'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'kp2016'
                            name = 'Kaustubh Patange'
                            email = 'developerkp16@gmail.com'
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git:github.com/KaustubhPatange/navigator.git'
                        developerConnection = 'scm:git:ssh://github.com/KaustubhPatange/navigator.git'
                        url = 'https://github.com/KaustubhPatange/navigator/tree/master'
                    }
                }
            }
        }
        repositories {
            // The repository to publish to, Sonatype/MavenCentral
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = "sonatype"

                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                // You only need this if you want to publish snapshots, otherwise just set the URL
                // to the release repo directly
                url = mode == "snapshot" ? snapshotsRepoUrl : releasesRepoUrl
                // The username and password we've fetched earlier
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}